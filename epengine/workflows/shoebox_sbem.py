"""Simulate an EnergyPlus ubem shoebox model with associated artifacts."""

import logging

from hatchet_sdk import Context, sync_to_async

from epengine.hatchet import hatchet
from epengine.models.mixins import WithHContext
from epengine.models.shoebox_sbem import SBEMSimulationSpec
from epengine.utils.results import serialize_df_dict

logger = logging.getLogger(__name__)


class SBEMSimulationSpecWithContext(WithHContext, SBEMSimulationSpec):
    """A simulation specification with a Hatchet Context."""

    pass


# TODO: This could be generated by a class method in the SimulationSpec class
# but should it?
@hatchet.workflow(
    name="simulate_sbem_shoebox",
    timeout="10m",
    version="0.3",
    schedule_timeout="1000m",
)
class SimulateSBEMShoebox:
    """A workflow to simulate an EnergyPlus model."""

    @hatchet.step(name="simulate", timeout="10m", retries=2)
    async def simulate(self, context: Context):
        """Simulate an EnergyPlus Shoebox UBEM model.

        Args:
            context (Context): The context of the workflow

        Returns:
            dict: A dictionary of dataframes with results.
        """
        return await run_step(context)


@sync_to_async
def run_step(context: Context):
    """Run a step of the workflow with async safety."""
    data = context.workflow_input()
    spec = SBEMSimulationSpecWithContext(**data, hcontext=context)
    _idf, results, err_text = spec.run(log_fn=context.log)
    results = {"results": results}
    context.log(err_text)

    dfs = serialize_df_dict(results)

    return dfs
