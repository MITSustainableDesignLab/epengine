"""Simulate an EnergyPlus ubem shoebox model with associated artifacts."""

import logging

import pandas as pd
from hatchet_sdk import Context

from epengine.hatchet import hatchet
from epengine.models.mappedsim import SBEMSimulationSpec
from epengine.models.mixins import WithHContext
from epengine.utils.results import serialize_df_dict

logger = logging.getLogger(__name__)


class SBEMSimulationSpecWithContext(WithHContext, SBEMSimulationSpec):
    """A simulation specification with a Hatchet Context."""

    pass


# TODO: This could be generated by a class method in the SimulationSpec class
# but should it?
@hatchet.workflow(
    name="simulate_sbem_mapped",
    timeout="10m",
    version="0.3",
    schedule_timeout="1000m",
)
class SimulateSBEMSimulation:
    """A workflow to simulate an EnergyPlus model."""

    @hatchet.step(name="simulate", timeout="10m", retries=2)
    def simulate(self, context: Context):
        """Simulate an EnergyPlus Shoebox UBEM model.

        Args:
            context (Context): The context of the workflow

        Returns:
            dict: A dictionary of dataframes with results.
        """
        data = context.workflow_input()
        spec = SBEMSimulationSpecWithContext(**data, hcontext=context)
        # _idf, results, err_text = await spec.run()
        # _idf, results, err_text = spec.run(log_fn=context.log)
        res = spec.run(log_fn=context.log)
        dfs = {"results": pd.DataFrame({"res": [res, res]})}

        dfs = serialize_df_dict(dfs)

        return dfs
